{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAaeA,EAXJ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACvB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKlBC,EAbC,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC5B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,OCKXI,EAZF,SAACC,GACV,OACI,qBAAKC,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAHZ,SAKKJ,EAAMK,YCoCJC,G,wDArCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACXvB,OAAQ,GACRK,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBmB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEpB,OAAQ4B,S,oBAO3C,WACE,MAA8BC,KAAKN,MAA7BvB,EAAN,EAAMA,OAAQK,EAAd,EAAcA,YACVyB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEvD,OAAQjC,EAAOmC,OAEX,sBAAKvC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlB,OAAQ8B,SANF,6C,GAxBVM,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,SAMnCX,M","file":"static/js/main.cd88b6f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nlet Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200*200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nlet CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nlet SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"seach robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nlet Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n            overflowY: \"scroll\",\r\n            border: \"5px solid black\",\r\n            height: \"800px\"\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from \"../components/Scroll\"\n// import { robots } from \"./robots\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    let { robots, searchfield } = this.state;\n    let filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ? <h1>Loading</h1> :\n      (\n        <div className=\"tc\">\n          <h1 className=\"f1\">ROBOFRIENDS</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\";\n\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}